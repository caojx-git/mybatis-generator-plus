<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">
<generatorConfiguration>

    <!--加载属性文件 -->
    <properties resource="application.properties"/>

    <!--flat该模型为每一张表只生成一个实体类-->
    <context id="context" targetRuntime="MyBatis3" defaultModelType="flat">
        <!-- 生成的Java文件的编码-->
        <property name="javaFileEncoding" value="UTF-8"/>

        <!-- 生成的POJO实现java.io.Serializable接口 插件-->
        <plugin type="org.mybatis.generator.plugins.SerializablePlugin"/>
        <!--MyBatisPlugin 插件-->
        <plugin type="caojx.learn.mybatisgeneratorplus.generator.mybatis.plugins.MyBatisPlugin"/>

        <!--注释配置-->
        <commentGenerator>
            <!--是否添加注释-->
            <!--            <property name="addRemarkComments" value="true"/>-->
            <!--是否抑制注释中的时间，默认为false，这里改为true，不生成时间（如果生成时间，则每次都是新版本，每次都要提交）-->
            <property name="suppressDate" value="true"/>
            <!--            <property name="dateFormat" value="yyyy-MM-dd HH:mm:ss"/>-->
            <!--抑制所有自动生成的注释，默认为false-->
            <property name="suppressAllComments" value="true"/>
        </commentGenerator>

        <!--数据库连接配置-->
        <jdbcConnection connectionURL="${spring.datasource.url}" driverClass="${spring.datasource.driver-class-name}"
                        userId="${spring.datasource.username}" password="${spring.datasource.password}">
            <!--是否只生成当前连接库的数据库表-->
            <property name="nullCatalogMeansCurrent" value="true"/>
            <!--支持oracle获取注释 -->
            <property name="remarksReporting" value="true"></property>
            <!--支持mysql获取注释 -->
            <property name="useInformationSchema" value="true"></property>
        </jdbcConnection>

        <!--MYSQL 数据库字段类型转换-->
        <javaTypeResolver
                type="caojx.learn.mybatisgeneratorplus.generator.mybatis.converts.SimpleJavaTypeResolverDefaultImpl"/>

        <!--生成模型的包名和位置
            targetPackage     指定生成的model生成所在的包名
            targetProject     指定在该项目下所在的路径
       -->
        <javaModelGenerator targetPackage="${generator.code.entityPackageName}"
                            targetProject="${generator.code.outputDir}"/>

        <!--Mapper.xml映射文件的包名和位置 -->
        <sqlMapGenerator targetPackage="${generator.code.mapperXmlPackageName}"
                         targetProject="${generator.code.outputDir}"/>

        <!--Mapper.java文件的包名和位置
            type="ANNOTATEDMAPPER",生成Java Model 和基于注解的Mapper对象
            type="MIXEDMAPPER",生成基于注解的Java Model 和相应的Mapper对象
            type="XMLMAPPER",生成SQLMap XML文件和独立的Mapper接口

            这里使用自定义的客户端生成器
        -->
        <javaClientGenerator type="XMLMAPPER" targetPackage="${generator.code.mapperPackageName}"
                             targetProject="${generator.code.outputDir}">
            <!--            <property name="rootInterface" value="${generator.code.superMapperClass}" />-->
        </javaClientGenerator>

        <!-- 要生成的表 tableName是数据库中的表名或视图名 -->
        <table tableName="${generator.code.likeTable}"
               enableInsert="false"
               enableDeleteByPrimaryKey="false"
               enableUpdateByPrimaryKey="false"
               enableSelectByPrimaryKey="true"
               enableSelectByExample="false"
               enableDeleteByExample="false"
               enableCountByExample="false"
               enableUpdateByExample="false"
               selectByExampleQueryId="false">
            <generatedKey column="ID" sqlStatement="MySql" identity="true"/>

            <!--            <columnOverride column="city_name" property="cityName" />-->
        </table>
    </context>

</generatorConfiguration>